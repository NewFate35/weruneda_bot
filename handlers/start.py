import datetime
import logging
import os
from contextlib import suppress

import pandas as pd
from aiogram import types
from aiogram.dispatcher.filters import BoundFilter
from aiogram.dispatcher.filters.builtin import CommandStart, Command, CommandHelp
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile

import config
from config import ADMINS
from keyboards import markup_main, markup_main_admin, admin_keyboard, faq_keyboard, inline_answers, cancel_markup, \
    breakfast_keyboard, edit_keyboard, breakfast_info_keyboard, rules_keyboard
from loader import dp, db, bot


class IsAdmin(BoundFilter):
    key = "is_admin"

    async def check(self, message: types.Message):
        res = False
        for admin in config.ADMINS:
            if message.from_user.id == int(admin):
                res = True
        return res


class IsPrivateChat(BoundFilter):

    async def check(self, message: types.Message):
        res = False
        if message.chat.type == "private":
            res = True
        return res


def check(user_id):
    res = False
    for admin in config.ADMINS:
        if user_id == int(admin):
            res = True
    return res


class Training(StatesGroup):
    FIO = State()
    phone = State()
    children_count = State()
    breakfast = State()
    breakfast_count = State()
    obyavlenie = State()
    otziv = State()


@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def new_chat_member(message: types.Message):
    last_msg = await db.select_last_msg_id()

    text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ We|Run|Eda!\n–ù–∞–∂–º–∏ –Ω–∞ @weruneda_bot –∏ –∏–∑—É—á–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!"

    if message['new_chat_member']['first_name']:
        text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message['new_chat_member']['first_name']}, " \
               f"–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ We|Run|Eda!\n–ù–∞–∂–º–∏ –Ω–∞ @weruneda_bot –∏ –∏–∑—É—á–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!"
        logging.info(f"–í—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ - {message['new_chat_member']['first_name']}")

    if len(last_msg) > 0:
        await bot.delete_message(chat_id=message.chat.id, message_id=last_msg[0]['message_id'])
    msg = await message.answer(text=text)

    await db.insert_last_message_id(msg.message_id)


@dp.message_handler(IsAdmin(), IsPrivateChat(), text="–û—Ç–º–µ–Ω–∞", state="*")
async def cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=markup_main_admin)


@dp.message_handler(IsPrivateChat(), text="–û—Ç–º–µ–Ω–∞", state="*")
async def cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=markup_main)


@dp.message_handler(IsAdmin(), IsPrivateChat(), CommandStart())
async def bot_start(message: types.Message):
    await db.add_user(message.from_user.id)
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –∞–¥–º–∏–Ω! Mr. Foxü¶ä –Ω–∞ —Å–≤—è–∑–∏!", reply_markup=markup_main_admin)
    await message.answer("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç–∏—Ç–µ –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞!", reply_markup=rules_keyboard)


@dp.message_handler(CommandStart(), IsPrivateChat())
async def bot_start(message: types.Message):
    await db.add_user(message.from_user.id)
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –¥—Ä—É–≥! Mr. Foxü¶ä –Ω–∞ —Å–≤—è–∑–∏!", reply_markup=markup_main)
    await message.answer("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç–∏—Ç–µ –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞!", reply_markup=rules_keyboard)


@dp.message_handler(IsAdmin(), IsPrivateChat(), text="–°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def make_obyavlenie(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=cancel_markup)
    await Training.obyavlenie.set()


@dp.message_handler(IsAdmin(), IsPrivateChat(), state=Training.obyavlenie)
async def save_obyavlenie(message: types.Message, state: FSMContext):
    users = await db.select_all_id_users()
    await state.finish()
    for user in users:
        await bot.send_message(user["telegram_id"], message.text)

    await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=markup_main_admin)


@dp.message_handler(CommandHelp(), IsPrivateChat())
async def bot_help(message: types.Message):
    text = ("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: ",
            "/start - –°—Ç–∞—Ä—Ç",
            # "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"
            )

    await message.answer("\n".join(text))


@dp.message_handler(IsAdmin(), IsPrivateChat(), text="–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞")
async def admin_mode(message: types.Message):
    await message.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", reply_markup=admin_keyboard)


@dp.message_handler(IsAdmin(), IsPrivateChat(), text="–†–µ–∂–∏–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def user_mode(message: types.Message):
    await message.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —é–∑–µ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", reply_markup=markup_main_admin)


@dp.message_handler(IsPrivateChat(), text="F.A.Q.")
async def faq(message: types.Message):
    await message.answer("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=faq_keyboard)


@dp.callback_query_handler(text_contains='question_')
async def faq_answers(call: types.CallbackQuery):
    if call.data and call.data.startswith("question_"):
        code = call.data[-1:]
        if code.isdigit():
            code = int(code)
        for k, v in inline_answers.items():
            if k == code:
                if code == 3:
                    await bot.send_photo(call.from_user.id, caption=v, photo=InputFile('–ø–∞—Ä–∫–æ–≤–∫–∞.png'))
                elif code == 5:
                    await bot.send_document(call.from_user.id,
                                            document=InputFile(f"–ü—Ä–∞–≤–∏–ª–∞_—Å–æ–æ–±—â–µ—Å—Ç–≤–∞.pdf"),
                                            caption="–ü—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ We|Run|Eda")
                else:
                    await bot.send_message(call.from_user.id, text=v)
        else:
            await bot.answer_callback_query(call.id)


@dp.message_handler(IsAdmin(), IsPrivateChat(), text="–û—Ç–∫—Ä—ã—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
async def open_reg(message: types.Message):
    await db.open_reg()
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞!")


@dp.message_handler(IsAdmin(), IsPrivateChat(), text="–ó–∞–∫—Ä—ã—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
async def close_reg(message: types.Message):
    await db.close_reg()
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞!")


@dp.message_handler(IsPrivateChat(), text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def otziv(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤:", reply_markup=cancel_markup)
    await Training.otziv.set()


@dp.message_handler(IsPrivateChat(), state=Training.otziv)
async def otziv(message: types.Message, state: FSMContext):
    if message.from_user.username:
        username = message.from_user.username
    elif message.from_user.full_name:
        username = message.from_user.full_name
    else:
        username = message.from_user.id
    msg = message.text
    text = f"–û—Ç–∑—ã–≤ –æ—Ç @{username}\n–¢–µ–∫—Å—Ç:\n{msg}"
    for admin in ADMINS:
        await bot.send_message(chat_id=admin, text=text)

    await state.finish()
    if check(message.from_user.id):
        await message.answer("–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!", reply_markup=markup_main_admin)
    else:
        await message.answer("–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!", reply_markup=markup_main)


@dp.message_handler(IsPrivateChat(), text="–°—É–±–±–æ—Ç–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∏ –∑–∞–≤—Ç—Ä–∞–∫\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏")
async def training(message: types.Message):
    check = await db.check_user(message.from_user.id)
    res = await db.check_reg_status()
    if check is not None:
        if check['meat_count'] > 0:
            text = f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–§–ò–û: {check['fio']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {check['phone']}\n–î–µ—Ç–µ–π: " \
                   f"{check['children_count']}\n–ö–æ–ª-–≤–æ –ø–æ—Ä—Ü–∏–π –∑–∞–≤—Ç—Ä–∞–∫–∞: {check['meat_count']}"
        elif check['vegan_count'] > 0:
            text = f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–§–ò–û: {check['fio']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {check['phone']}\n–î–µ—Ç–µ–π: " \
                   f"{check['children_count']}\n–ö–æ–ª-–≤–æ –ø–æ—Ä—Ü–∏–π –∑–∞–≤—Ç—Ä–∞–∫–∞: {check['vegan_count']}"
        else:
            text = f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–§–ò–û: {check['fio']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {check['phone']}\n–î–µ—Ç–µ–π: " \
                   f"{check['children_count']}\n–ë–µ–∑ –∑–∞–≤—Ç—Ä–∞–∫–∞!"

        await message.answer(text=text, reply_markup=edit_keyboard)
    else:
        if res['status']:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û:", reply_markup=cancel_markup)
            await Training.FIO.set()
        else:
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞!")


@dp.callback_query_handler(text="edit")
async def edit(call: types.CallbackQuery):
    res = await db.check_reg_status()
    if res['status']:
        await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û:", reply_markup=cancel_markup)
        await Training.FIO.set()
    else:
        await bot.send_message(call.from_user.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞! –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–µ–ª—å–∑—è")


@dp.callback_query_handler(text="cancel")
async def cancel(call: types.CallbackQuery):
    res = await db.check_reg_status()
    if res['status']:
        if check(call.from_user.id):
            await db.delete_user(call.from_user.id)
            await bot.send_message(call.from_user.id, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ :(", reply_markup=markup_main_admin)
        else:
            await db.delete_user(call.from_user.id)
            await bot.send_message(call.from_user.id, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ :(", reply_markup=markup_main)
    else:
        await bot.send_message(call.from_user.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞! –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–µ–ª—å–∑—è")


@dp.message_handler(IsAdmin(), IsPrivateChat(), text="–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
async def count(message: types.Message, state: FSMContext):
    count = await db.count()
    children_count = await db.children_count()
    meat_count = await db.meat_count()
    vegan_count = await db.vegan_count()
    await message.answer(
        f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}\n–î–µ—Ç–µ–π: {children_count}\n–ú—è—Å–Ω—ã—Ö –∑–∞–≤—Ç—Ä–∞–∫–æ–≤: {meat_count}\n–í–µ–≥–∞–Ω–æ–≤: {vegan_count}",
        reply_markup=breakfast_info_keyboard)


@dp.message_handler(IsAdmin(), IsPrivateChat(), commands='delete_all')
async def delete_all(message: types.Message, state: FSMContext):
    await db.delete_all()
    await message.answer("–¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞!")


@dp.message_handler(IsPrivateChat(), state=Training.FIO)
async def save_fio(message: types.Message, state: FSMContext):
    await state.update_data(FIO=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
    await Training.phone.set()


@dp.message_handler(IsPrivateChat(), state=Training.phone)
async def save_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–í—ã –±—É–¥–µ—Ç–µ —Å –¥–µ—Ç—å–º–∏? –ï—Å–ª–∏ –¥–∞, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –∫–æ–ª-–≤–æ, –∏–Ω–∞—á–µ - 0")
    await Training.children_count.set()


@dp.message_handler(IsPrivateChat(), state=Training.children_count)
async def save_children_count(message: types.Message, state: FSMContext):
    await state.update_data(children_count=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=breakfast_keyboard)
    await Training.breakfast.set()


@dp.callback_query_handler(text="without_breakfast", state=Training.breakfast)
async def without_breakfast(call: types.CallbackQuery, state: FSMContext):
    reg_data = await state.get_data()
    user_id = call.from_user.id
    FIO = reg_data['FIO']
    phone = reg_data['phone']
    children_count = reg_data['children_count']
    await db.add_user_training(user_id, FIO, phone, children_count, meat_count=0, vegan_count=0)

    if check(call.from_user.id):
        await bot.send_message(call.from_user.id,
                               text=f"–§–ò–û: {FIO}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–î–µ—Ç–µ–π: {children_count}\n"
                                    f"–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –±–µ–∑ –∑–∞–≤—Ç—Ä–∞–∫–∞!",
                               reply_markup=markup_main_admin)
        await bot.send_message(call.message.from_user.id,
                               text="–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –æ–ø–ª–∞—Ç—É!\n–ì—Ä—É–ø–ø–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - 100‚ÇΩ\n–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ + –∑–∞–≤—Ç—Ä–∞–∫ - 400‚ÇΩ",
                               reply_markup=markup_main_admin)
    else:
        await bot.send_message(call.from_user.id,
                               text=f"–§–ò–û: {FIO}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–î–µ—Ç–µ–π: {children_count}\n"
                                    f"–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –±–µ–∑ –∑–∞–≤—Ç—Ä–∞–∫–∞!",
                               reply_markup=markup_main)
        await bot.send_message(call.message.from_user.id,
                               text="–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –æ–ø–ª–∞—Ç—É!\n–ì—Ä—É–ø–ø–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - 100‚ÇΩ\n–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ + –∑–∞–≤—Ç—Ä–∞–∫ - 400‚ÇΩ",
                               reply_markup=markup_main)

    await state.finish()


@dp.callback_query_handler(text="meat_breakfast", state=Training.breakfast)
async def meat_breakfast(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(breakfast="–º—è—Å–Ω–æ–π")
    await bot.send_message(call.from_user.id, text="–ö–æ–ª-–≤–æ –ø–æ—Ä—Ü–∏–π –∑–∞–≤—Ç—Ä–∞–∫–∞:")
    await Training.breakfast_count.set()


@dp.callback_query_handler(text="vegan_breakfast", state=Training.breakfast)
async def vegan_breakfast(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(breakfast="–≤–µ–≥–∞–Ω")
    await bot.send_message(call.from_user.id, text="–ö–æ–ª-–≤–æ –ø–æ—Ä—Ü–∏–π –∑–∞–≤—Ç—Ä–∞–∫–∞:")
    await Training.breakfast_count.set()


@dp.message_handler(IsPrivateChat(), state=Training.breakfast_count)
async def save_breakfast_count(message: types.Message, state: FSMContext):
    await state.update_data(breakfast_count=int(message.text))
    reg_data = await state.get_data()
    user_id = message.from_user.id
    FIO = reg_data['FIO']
    phone = reg_data['phone']
    children_count = reg_data['children_count']
    breakfast = reg_data['breakfast']
    breakfast_count = reg_data['breakfast_count']
    if breakfast == '–º—è—Å–Ω–æ–π':
        await db.add_user_training(user_id, FIO, phone, children_count, meat_count=breakfast_count, vegan_count=0)
    else:
        await db.add_user_training(user_id, FIO, phone, children_count, meat_count=0, vegan_count=breakfast_count)

    if check(message.from_user.id):
        await message.answer(
            text=f"–§–ò–û: {FIO}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–î–µ—Ç–µ–π: {children_count}\n–ö–æ–ª-–≤–æ –ø–æ—Ä—Ü–∏–π –∑–∞–≤—Ç—Ä–∞–∫–∞: {breakfast_count}\n"
                 f"–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ {breakfast} –∑–∞–≤—Ç—Ä–∞–∫!",
            reply_markup=markup_main_admin)
        await message.answer(text="–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –æ–ø–ª–∞—Ç—É!\n–ì—Ä—É–ø–ø–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - 100‚ÇΩ\n–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ + –∑–∞–≤—Ç—Ä–∞–∫ - 400‚ÇΩ",
                             reply_markup=markup_main_admin)
    else:
        await message.answer(
            text=f"–§–ò–û: {FIO}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–î–µ—Ç–µ–π: {children_count}\n–ö–æ–ª-–≤–æ –ø–æ—Ä—Ü–∏–π –∑–∞–≤—Ç—Ä–∞–∫–∞: {breakfast_count}\n"
                 f"–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ {breakfast} –∑–∞–≤—Ç—Ä–∞–∫!",
            reply_markup=markup_main)
        await message.answer(text="–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –æ–ø–ª–∞—Ç—É!\n–ì—Ä—É–ø–ø–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - 100‚ÇΩ\n–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ + –∑–∞–≤—Ç—Ä–∞–∫ - 400‚ÇΩ",
                             reply_markup=markup_main)
    await state.finish()


@dp.callback_query_handler(IsAdmin(), text="breakfast_info")
async def breakfast_info(call: types.CallbackQuery):
    await call.message.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–∞–±–ª–∏—Ü—É: ")

    users = await db.get_users_info()
    fio_s, phone_s, children_count, meat_count, vegan_count = [], [], [], [], []

    for user in users:
        fio_s.append(user["fio"])
        phone_s.append(user["phone"])
        children_count.append(user["children_count"])
        meat_count.append(user["meat_count"])
        vegan_count.append(user["vegan_count"])

    df = pd.DataFrame({"–§–ò–û": fio_s, "–¢–µ–ª–µ—Ñ–æ–Ω": phone_s, "–ö–æ–ª-–≤–æ –¥–µ—Ç–µ–π": children_count, "–ú—è—Å–Ω–æ–π –∑–∞–≤—Ç—Ä–∞–∫": meat_count,
                       "–í–µ–≥–∞–Ω": vegan_count})
    date = datetime.date.today()
    df.to_excel(f'./{date}.xlsx')
    await call.message.answer_document(InputFile(f'{date}.xlsx'))
    delete_file(date)


def delete_file(date):
    current = os.getcwd()
    if os.path.isfile(f'{current}\\{date}.xlsx'):
        os.remove(f'{current}\\{date}.xlsx')
